namespace Sakuno.Avm.Abc
{
    public enum InstructionKind
    {
        Nop = 0x02,
        Throw,
        GetSuper,
        SetSuper,
        DXNS,
        DXNSLate,
        Kill,
        Label,
        IfNLt = 0x0C,
        IfNLe,
        IfNGt,
        IfNGe,
        Jump,
        IfTrue,
        IfFalse,
        IfEq,
        IfNe,
        IfLt,
        IfLe,
        IfGt,
        IfGe,
        IfStrictEq,
        IfStrictNe,
        LookupSwitch,
        PushWith,
        PopScope,
        NextName,
        HasNext,
        PushNull,
        PushUndefined,
        NextValue = 0x23,
        PushByte,
        PushShort,
        PushTrue,
        PushFalse,
        PushNaN,
        Pop,
        Dup,
        Swap,
        PushString,
        PushInt,
        PushUInt,
        PushDouble,
        PushScope,
        PushNamespace,
        HasNext2,
        NewFunction = 0x40,
        Call,
        Construct,
        CallMethod,
        CallStatic,
        CallSuper,
        CallProperty,
        ReturnVoid,
        ReturnValue,
        ConstructSuper,
        ConstructProp,
        CallPropLex = 0x4C,
        CallSuperVoid = 0x4E,
        CallPropVoid,
        ApplyType = 0x53,
        NewObject = 0x55,
        NewArray,
        NewActivation,
        NewClass,
        GetDescendants,
        NewCatch,
        FindPropertyStrict = 0x5D,
        FindProperty,
        GetLex = 0x60,
        SetProperty,
        GetLocal,
        SetLocal,
        GetGlobalScope,
        GetScopeObject,
        GetProperty,
        InitProperty = 0x68,
        DeleteProperty = 0x6A,
        GetSlot = 0x6C,
        SetSlot,
        GetGlobalSlot,
        SetGlobalSlot,
        ConvertS = 0x70,
        EscXElem,
        EscXAttr,
        ConvertI,
        ConvertU,
        ConvertD,
        ConvertB,
        ConvertO,
        CheckFilter,
        Coerce = 0x80,
        CoerceA = 0x82,
        CoerceS = 0x85,
        AsType,
        AsTypeLate,
        Negate = 0x90,
        Increment,
        IncLocal,
        Decrement,
        DecLocal,
        TypeOf,
        Not,
        BitNot,
        Add = 0xA0,
        Subtract,
        Multiply,
        Divide,
        Modulo,
        LShift,
        RShift,
        URShift,
        BitAnd,
        BitOr,
        BitXor,
        Equals,
        StrictEquals,
        LessThan,
        LessEquals,
        GreaterThan,
        GreaterEquals,
        InstanceOf = 0xB1,
        IsType,
        IsTypeLate,
        In,
        IncrementI = 0xC0,
        DecrementI,
        IncLocalI,
        DecLocalI,
        NegateI,
        AddI,
        SubtractI,
        MultiplyI,
        GetLocal0 = 0xD0,
        GetLocal1,
        GetLocal2,
        GetLocal3,
        SetLocal0,
        SetLocal1,
        SetLocal2,
        SetLocal3,
        Debug = 0xEF,
        DebugLine,
        DebugFile,
    }
}
